---
layout: default
title: Lyrics and Quotes
description: Design Document for Lyrics and Quotes Website
permalink: /lyricsandquotes/
---
**Idea: Make a website for people to post their favorite websites and quotes along with descriptions of why they think those quotes are valuable and what is the meaning behind them.**

## Overview
I decided to user Firebase Real Time Database which eliminates the need for a server because we can do **authorization** using security rules and **authentication** using the Firebase built-in SDK. The database is also **real time** which means that all clients will be updated live when content changes using a **pub/sub** system. I also chose to use [Svelte](https://svelte.dev/) because it is easy to learn the framework. When I was working with the framework I found it easy to manage application state using svelte `stores` and had an easy time designing my app using Svelte's component structure.I used Svelte's logic operations that can be inserted directly into the HTML and to change the UI depending on the application state and the Svelte iterate operation to iterate over an arry of components (ex. `posts` and `comments`). I highly recommend using Svelte for any web application.

## Project Structure
```
src/
└── components/
    ├── App.svelte // main page component
    ├── Post.svelte // post component
    ├── Posts.svelte // a collection of posts
    ├── Profile.svelte // user profile
    ├── Comments.svelte // a collection of comments
    ├── CommentView.svelte // a comment component to show all comment data
    ├── database/
    │   └── firebase.ts // connect to firebase and export references
    ├── main.ts // searches for the App.svelte component and inserts it into the HTML body
    ├── stores.ts // a file that contains all stores which are objects that can be written to and read from different places in the code
    └── types.ts // I used types for things like posts to make the code more readable
```

## Database Structure
The `posts` node contains entries where the key is a unique ID that is generated by Firebase and the value is the post data. I decided to add the username and image of the owner (the person who made) as part of the post data because if I put that information under `users` I would have had to give everybody read access to the `users` node which is insecure (Look at the security rules for more details [security rules]()). I also didn't include comments as part of the post data because I didn't want to load comment for every post if the user didn't want to show comments. The `usersVoted` field is meant to keep track of users who already voted on the post and to prevent them from voting again. Similarly, I keep track of the `ownerID` so I can prevent the people from upvoting their own post. For more details see [security rules](). 
```
posts/
├── <postID>/
│   ├── quote
│   ├── description
│   ├── ownerID
│   ├── ownerImageURL
│   ├── ownerUsername
│   ├── timestamp
│   ├── sourceType
│   ├── source
│   ├── score
│   └── usersVoted/
│       ├── <user_id>
│       └── ...
└── ...
users/
├── <userID>/
│   ├── <postID> // Saved posts
│   └── ...
└── ...
comments/
├── <postID>/
│   ├── <commentID>/
│   │   ├── username
│   │   ├── userImageURL
│   │   └── text
│   └── ...
└── ...
```

## Security Rules
Here is a summary of the security rules as it is published on firebase. At each level there are rules who can read and write to that node. If a read or write permission is not specified, then no one can read or write to that node or its children. If both the child and the parent specify a read or write permission the  two rules will be concatenated with `or` . All users can read all post data (which includes profile pictures and usernames of people who posted on the platform) for their feed. The can add new posts as well as save posts which they can then access. However, users can’t see other users’ saved posts.
```
posts/
├── 1. Autheniticated users can add posts in this node if the post has all the required data fields
├── 2. Authenticated users can also read all data that's stored in this node
└── <postID>/
    └── 3. Autheniticated users can increment or decrement the score of any post by one if they haven't already voted
users/
├── 4. If the authenticated user's ID is not in this list, the authenticated user has a premission to add it. 
├── The user's ID will be added to the list once they authenticate.
└── <userID>/
    └── 5. The user with this ID can read and write to their saved posts
comments/
├── 6. Users can read comments from all posts
├── <postID>
└── 7. Users can add comments so they can't change the value of any existing comment/
    └── <commentID>
```
**NOTE:** rule number 4 works because the only way to get authenticated is through the google sign in and once the client is authenticated they are immediately added to the user list. If that were not the case, the client could get authenticated, not have their ID in the list and have access to all users data.

